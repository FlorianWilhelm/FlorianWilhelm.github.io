<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Florian Wilhelm</title><link href="http://www.florianwilhelm.info/" rel="alternate"></link><link href="http://www.florianwilhelm.info/feeds/talks.atom.xml" rel="self"></link><id>http://www.florianwilhelm.info/</id><updated>2015-12-22T19:30:00+01:00</updated><entry><title>How to write a friendly reminder bot</title><link href="http://www.florianwilhelm.info/2015/07/howto_write_a_friendly_reminder_bot/" rel="alternate"></link><updated>2015-12-22T19:30:00+01:00</updated><author><name>Florian Wilhelm</name></author><id>tag:www.florianwilhelm.info,2015-07-24:2015/07/howto_write_a_friendly_reminder_bot/</id><summary type="html">&lt;p&gt;In this presentation given at the &lt;a href="https://ep2015.europython.eu/"&gt;EuroPython 2015&lt;/a&gt; in Bilbao,
I show how the &lt;a href="https://github.com/tdryer/hangups"&gt;hangups&lt;/a&gt; library can be used
in order to write a small chatbot that connects to Google Hangouts
and reminds you or someone else to take his/her medication.
The secure and recommended OAuth2 protocol is used to authorize the bot application
in the Google Developers Console in order to access the Google+ Hangouts &lt;span class="caps"&gt;API&lt;/span&gt;.
Subsequently, I explain how to use an event-driven library to write a bot
that sends scheduled messages, waits for a proper reply and repeats the question if need be.
Thereby, a primer on event-driven, asynchronous architectures is&amp;nbsp;given.&lt;/p&gt;
&lt;p&gt;The source code can be downloaded on &lt;a href="https://github.com/blue-yonder/medbot"&gt;GitHub&lt;/a&gt;
and the slides are available as &lt;a href="http://htmlpreview.github.io/?https://github.com/blue-yonder/medbot/blob/master/medbot.slides.html?theme=solarized#/"&gt;html preview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe width="800" height="500"
                    src='https://www.youtube.com/embed/ztfdv9jcxtw'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="google hangouts"></category><category term="asyncio"></category><category term="event-driven"></category><category term="asynchronous"></category></entry><entry><title>Extending Scikit-Learn with your own Regressor</title><link href="http://www.florianwilhelm.info/2014/07/extending_scikit-learn_with_your_own_regressor/" rel="alternate"></link><updated>2015-12-22T19:30:00+01:00</updated><author><name>Florian Wilhelm</name></author><id>tag:www.florianwilhelm.info,2014-07-25:2014/07/extending_scikit-learn_with_your_own_regressor/</id><summary type="html">&lt;p&gt;&lt;a href="http://scikit-learn.org/"&gt;Scikit-Learn&lt;/a&gt; is a well-known and popular framework for
machine learning that is used by Data Scientists all over the world.
In this tutorial presented at the &lt;a href="https://ep2014.europython.eu/"&gt;EuroPython 2014&lt;/a&gt; in Berlin,
I show in a practical way how you can add your own estimator following the interfaces of Scikit-Learn.
First a small introduction to the design of Scikit-Learn and its inner workings is given.
Then I show how easily Scikit-Learn can be extended by creating an own estimator.
In order to demonstrate this, I extend Scikit-Learn by the popular and robust
&lt;a href="http://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator"&gt;Theil-Sen Estimator&lt;/a&gt;
that was not in Scikit-Learn until version 0.16.
I also motivate this estimator by outlining some of its superior properties compared
to the ordinary least squares method (LinearRegression in&amp;nbsp;Scikit-Learn).&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe width="800" height="500"
                    src='https://www.youtube.com/embed/u2tnvWyO3U0'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="scikit-learn"></category><category term="machine-learning"></category></entry><entry><title>How to Setup a new Python Project</title><link href="http://www.florianwilhelm.info/2014/07/howto_setup_a_new_python_project/" rel="alternate"></link><updated>2015-12-22T19:30:00+01:00</updated><author><name>Felix Wick</name></author><id>tag:www.florianwilhelm.info,2014-07-23:2014/07/howto_setup_a_new_python_project/</id><summary type="html">&lt;p&gt;In this presentation held at the &lt;a href="https://ep2014.europython.eu/"&gt;EuroPython 2014&lt;/a&gt;
in Berlin, my colleague Felix Wick demonstrates that setting up a new Python project
from scratch can be quite complicated. Especially, structuring your files and directories
the right way in order to build a Python package.
Thereby, questions are addressed like &amp;#8220;Where should my modules, documentation and
unit tests go?&amp;#8221; and &amp;#8220;How do I configure setup.py, Sphinx and so on?&amp;#8221; with proven answers!
Finally, the template tool &lt;a href="http://pyscaffold.readthedocs.org/"&gt;PyScaffold&lt;/a&gt; is demonstrated
that I developed at &lt;a href="http://www.blue-yonder.com/"&gt;Blue Yonder&lt;/a&gt;. PyScaffold extremely
simplifies the process of setting up a new Python project and is freely available to&amp;nbsp;anyone.&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe width="800" height="500"
                    src='https://www.youtube.com/embed/r8Rqp2w_kHk'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="template"></category></entry><entry><title>Handling Big Data with Python</title><link href="http://www.florianwilhelm.info/2013/10/handling_big_data_with_python/" rel="alternate"></link><updated>2015-12-22T19:30:00+01:00</updated><author><name>Florian Wilhelm</name></author><id>tag:www.florianwilhelm.info,2013-10-17:2013/10/handling_big_data_with_python/</id><summary type="html">&lt;p&gt;The talk presented at the PyCon 2013 in Cologne gives a small introduction of how
&lt;a href="http://www.blue-yonder.com/"&gt;Blue Yonder&lt;/a&gt; applies machine learning and Predictive
Analytics in various fields as well as the challenges of Big Data.
Using the example of Blue Yonder&amp;#8217;s machine learning software NeuroBayes, I show
the made efforts and hit dead ends in order to provide a flexible and yet easy to
use interface for NeuroBayes to Data Scientists.
Since NeuroBayes is written in &lt;span class="caps"&gt;FORTRAN&lt;/span&gt; for performance reasons different interface
approaches were tried which lead us eventually to a Python interface. In this talk,
I elaborate on the up- and downsides of the different approaches and the various
reasons why Python won the race with an emphasize on the benefits of the Python ecosystem itself.
Also, I discuss performance as well as scalability issues with Python and how we address them at Blue Yonder.
In detail, I show the application of Cython to speed up calculations in the Python interface
layer as well as distributed computing in a private cloud called Stratosphere.
Scalability and efficiency is of utmost importance when data processing is time critical.
The overall goal is to give the audience an overview how Python fits in the software ecosystem of a company handling Big&amp;nbsp;Data.&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe width="800" height="500"
                    src='https://www.youtube.com/embed/CxinlY8yGUM'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="scikit-learn"></category><category term="big data"></category></entry></feed>